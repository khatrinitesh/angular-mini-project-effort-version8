import * as tslib_1 from "tslib";
import { Directive, Input, HostBinding, ElementRef } from '@angular/core';
import { FocusService } from './focus.service';
import { isDocumentAvailable } from './../util';
/**
 * @hidden
 */
var FocusableDirective = /** @class */ (function () {
    function FocusableDirective(focusService, elementRef) {
        this.focusService = focusService;
        this.element = elementRef.nativeElement;
        this.subscribeEvents();
    }
    Object.defineProperty(FocusableDirective.prototype, "focusedClassName", {
        get: function () {
            return this.focusService.isFocused(this.index);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    FocusableDirective.prototype.ngOnDestroy = function () {
        this.unsubscribeEvents();
    };
    FocusableDirective.prototype.subscribeEvents = function () {
        var _this = this;
        if (!isDocumentAvailable()) {
            return;
        }
        this.focusSubscription = this.focusService.onFocus.subscribe(function (index) {
            if (_this.index === index) {
                _this.element.focus();
            }
        });
    };
    FocusableDirective.prototype.unsubscribeEvents = function () {
        if (!isDocumentAvailable()) {
            return;
        }
        if (this.focusSubscription) {
            this.focusSubscription.unsubscribe();
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], FocusableDirective.prototype, "index", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-state-focused'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], FocusableDirective.prototype, "focusedClassName", null);
    FocusableDirective = tslib_1.__decorate([
        Directive({
            selector: '[kendoButtonFocusable]'
        }),
        tslib_1.__metadata("design:paramtypes", [FocusService, ElementRef])
    ], FocusableDirective);
    return FocusableDirective;
}());
export { FocusableDirective };
