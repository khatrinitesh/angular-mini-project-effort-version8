import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Renderer2 as Renderer, Output, Optional, Inject } from '@angular/core';
import { RTL } from '@progress/kendo-angular-l10n';
import { KendoButtonService } from './button.service';
import { isDocumentAvailable } from '../util';
/**
 * Represents the Kendo UI Button component for Angular.
 */
let ButtonDirective = class ButtonDirective {
    constructor(element, renderer, service, rtl) {
        this.service = service;
        /**
         * Provides visual styling that indicates if the Button is active.
         * By default, `togglable` is set to `false`.
         */
        this.togglable = false;
        /**
         * Adds visual weight to the Button and makes it primary.
         */
        this.primary = false;
        /**
         * Changes the visual appearance by using alternative styling options.
         * The available values are:
         * * `bare`
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        this.isDisabled = false;
        this.isIcon = false;
        this.isIconClass = false;
        /**
         * Sets the selected state of the Button.
         */
        this.selected = false;
        /**
         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabIndex = 0;
        /**
         * Fires each time the selected state of a togglable button is changed.
         *
         * The event argument is the new selected state (boolean).
         */
        this.selectedChange = new EventEmitter();
        this.direction = rtl ? 'rtl' : 'ltr';
        this.element = element.nativeElement;
        this.renderer = renderer;
    }
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    set icon(icon) {
        if (icon) {
            this.iconSetter(icon, () => {
                this.isIcon = true;
                const classes = 'k-icon k-i-' + icon;
                this.addIcon(classes);
            });
        }
        else {
            this.isIcon = false;
            this.updateIconNode();
        }
    }
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    set iconClass(iconClassName) {
        if (iconClassName) {
            this.iconSetter(iconClassName, () => {
                this.isIconClass = true;
                this.addIcon(iconClassName);
            });
        }
        else {
            this.isIconClass = false;
            this.updateIconNode();
        }
    }
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    set imageUrl(imageUrl) {
        if (imageUrl) {
            this.iconSetter(imageUrl, this.addImgIcon.bind(this));
        }
        else {
            this.removeImageNode();
        }
    }
    /**
     * If set to `true`, it disables the Button.
     */
    set disabled(disabled) {
        this.isDisabled = disabled;
        this.renderer.setProperty(this.element, 'disabled', disabled);
    }
    get classButton() {
        return true;
    }
    get classDisabled() {
        return this.isDisabled;
    }
    get classPrimary() {
        return this.primary;
    }
    get isBare() {
        return this.look === 'bare';
    }
    get isFlat() {
        return this.look === 'flat';
    }
    get isOutline() {
        return this.look === 'outline';
    }
    get classActive() {
        return this.selected;
    }
    /**
     * @hidden
     */
    onClick() {
        if (!this.togglable) {
            return;
        }
        if (!this.disabled && this.service) {
            this.service.click(this);
        }
        if (!this.service) {
            this.setSelected(!this.selected);
        }
    }
    get dir() {
        return this.direction;
    }
    ngAfterViewChecked() {
        if (this.isIcon) {
            const hasText = this.hasText();
            this.toggleClass('k-button-icon', !hasText);
            this.toggleClass('k-button-icontext', hasText);
        }
    }
    ngOnDestroy() {
        this.removeNodes();
        this.renderer = null;
    }
    /**
     * Focuses the Button component.
     */
    focus() {
        if (isDocumentAvailable()) {
            this.element.focus();
        }
    }
    /**
     * Blurs the Button component.
     */
    blur() {
        if (isDocumentAvailable()) {
            this.element.blur();
        }
    }
    /**
     * @hidden
     */
    setAttribute(attribute, value) {
        this.renderer.setAttribute(this.element, attribute, value);
    }
    /**
     * @hidden
     *
     * Internal setter that triggers selectedChange
     */
    setSelected(value) {
        const changed = this.selected !== value;
        this.selected = value;
        if (changed) {
            this.selectedChange.emit(value);
        }
    }
    hasText() {
        if (isDocumentAvailable()) {
            return this.element.innerText.length > 0;
        }
        else {
            return false;
        }
    }
    addImgIcon(imageUrl) {
        let renderer = this.renderer;
        if (this.imageNode) {
            renderer.setProperty(this.imageNode, 'src', imageUrl);
        }
        else if (isDocumentAvailable()) {
            this.imageNode = renderer.createElement('img');
            renderer.setProperty(this.imageNode, 'src', imageUrl);
            renderer.setProperty(this.imageNode, 'className', 'k-image');
            renderer.setAttribute(this.imageNode, 'role', 'presentation');
            this.prependChild(this.imageNode);
        }
    }
    addIcon(classNames) {
        let renderer = this.renderer;
        if (this.iconNode) {
            renderer.setProperty(this.iconNode, 'className', classNames);
        }
        else if (isDocumentAvailable()) {
            this.iconNode = renderer.createElement('span');
            renderer.setProperty(this.iconNode, 'className', classNames);
            renderer.setAttribute(this.iconNode, 'role', 'presentation');
            this.prependChild(this.iconNode);
        }
    }
    prependChild(node) {
        setTimeout(() => {
            if (this.renderer && node !== this.element.firstChild) {
                this.renderer.insertBefore(this.element, node, this.element.firstChild);
            }
        });
    }
    iconSetter(icon, insertIcon) {
        if (icon) {
            insertIcon(icon);
        }
    }
    removeNodes() {
        this.removeImageNode();
        this.removeIconNode();
    }
    removeImageNode() {
        if (this.imageNode && this.renderer.parentNode(this.imageNode)) {
            this.renderer.removeChild(this.element, this.imageNode);
            this.imageNode = undefined;
        }
    }
    removeIconNode() {
        if (this.iconNode && this.renderer.parentNode(this.iconNode)) {
            this.renderer.removeChild(this.element, this.iconNode);
            this.iconNode = undefined;
        }
    }
    updateIconNode() {
        if (!this.isIcon && !this.isIconClass) {
            this.removeIconNode();
        }
    }
    toggleClass(className, add) {
        if (add) {
            this.renderer.addClass(this.element, className);
        }
        else {
            this.renderer.removeClass(this.element, className);
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ButtonDirective.prototype, "togglable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ButtonDirective.prototype, "primary", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ButtonDirective.prototype, "look", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ButtonDirective.prototype, "selected", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ButtonDirective.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], ButtonDirective.prototype, "icon", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], ButtonDirective.prototype, "iconClass", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], ButtonDirective.prototype, "imageUrl", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ButtonDirective.prototype, "disabled", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ButtonDirective.prototype, "selectedChange", void 0);
tslib_1.__decorate([
    HostBinding('class.k-button'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classButton", null);
tslib_1.__decorate([
    HostBinding('class.k-state-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classDisabled", null);
tslib_1.__decorate([
    HostBinding('class.k-primary'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classPrimary", null);
tslib_1.__decorate([
    HostBinding('class.k-bare'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isBare", null);
tslib_1.__decorate([
    HostBinding('class.k-flat'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isFlat", null);
tslib_1.__decorate([
    HostBinding('class.k-outline'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "isOutline", null);
tslib_1.__decorate([
    HostBinding('class.k-state-active'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "classActive", null);
tslib_1.__decorate([
    HostListener('click'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], ButtonDirective.prototype, "onClick", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], ButtonDirective.prototype, "dir", null);
ButtonDirective = tslib_1.__decorate([
    Directive({
        exportAs: 'kendoButton',
        selector: 'button[kendoButton]' // tslint:disable-line
    }),
    tslib_1.__param(2, Optional()),
    tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(RTL)),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer,
        KendoButtonService, Boolean])
], ButtonDirective);
export { ButtonDirective };
